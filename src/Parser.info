-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from src/Parser.y
-----------------------------------------------------------------------------

state 70 contains 1 shift/reduce conflicts.

terminal then is unused
terminal '.' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Start                             (0)
	Start -> Func                                      (1)
	Start -> Start Func                                (2)
	Func -> int string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}'   (3)
	Func -> bool string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}'   (4)
	Func -> int string '(' FuncAssignBlock ')' '{' ReturnStm '}'   (5)
	Func -> bool string '(' FuncAssignBlock ')' '{' ReturnStm '}'   (6)
	Func -> int main '(' ')' '{' StmBlock '}'          (7)
	FuncAssign -> int string                           (8)
	FuncAssign -> bool string                          (9)
	FuncAssignBlock ->                                 (10)
	FuncAssignBlock -> FuncAssign                      (11)
	FuncAssignBlock -> FuncAssignBlock ',' FuncAssign   (12)
	Stm -> string '=' Exp ';'                          (13)
	Stm -> int string ';'                              (14)
	Stm -> int string '=' Exp ';'                      (15)
	Stm -> bool string ';'                             (16)
	Stm -> bool string '=' Exp ';'                     (17)
	Stm -> if Exp Stm                                  (18)
	Stm -> if Exp Stm else Stm                         (19)
	Stm -> while Exp Stm                               (20)
	Stm -> '{' StmBlock '}'                            (21)
	Stm -> string '(' ExpCallBlock ')' ';'             (22)
	Stm -> print_int '(' Exp ')' ';'                   (23)
	Stm -> ReturnStm                                   (24)
	ReturnStm -> return Exp ';'                        (25)
	StmBlock -> Stm                                    (26)
	StmBlock -> StmBlock Stm                           (27)
	Exp -> num                                         (28)
	Exp -> string                                      (29)
	Exp -> true                                        (30)
	Exp -> false                                       (31)
	Exp -> '(' Exp ')'                                 (32)
	Exp -> Exp '+' Exp                                 (33)
	Exp -> Exp '-' Exp                                 (34)
	Exp -> Exp '*' Exp                                 (35)
	Exp -> Exp '/' Exp                                 (36)
	Exp -> Exp '%' Exp                                 (37)
	Exp -> Exp '<=' Exp                                (38)
	Exp -> Exp '>=' Exp                                (39)
	Exp -> Exp '<' Exp                                 (40)
	Exp -> Exp '>' Exp                                 (41)
	Exp -> Exp '==' Exp                                (42)
	Exp -> Exp '!=' Exp                                (43)
	Exp -> string '(' ExpCallBlock ')'                 (44)
	Exp -> scan_int '(' ')'                            (45)
	ExpCall -> Exp                                     (46)
	ExpCallBlock ->                                    (47)
	ExpCallBlock -> ExpCall                            (48)
	ExpCallBlock -> ExpCallBlock ',' ExpCall           (49)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TOK_INT }
	num            { TOK_NUM $$ }
	string         { TOK_ID $$ }
	main           { TOK_MAIN_FUNC }
	if             { TOK_IF }
	then           { TOK_THEN }
	else           { TOK_ELSE }
	return         { TOK_RETURN }
	while          { TOK_WHILE }
	bool           { TOK_BOOLEAN }
	true           { TOK_BOOL $$ }
	false          { TOK_BOOL $$ }
	scan_int       { TOK_SCAN_INT }
	print_int      { TOK_PRINT_INT }
	'+'            { TOK_PLUS }
	'-'            { TOK_MINUS }
	'*'            { TOK_MULT }
	'/'            { TOK_DIV }
	','            { TOK_COMMA }
	';'            { TOK_SEMICOLON }
	'.'            { TOK_DOT }
	'('            { TOK_LPAREN }
	')'            { TOK_RPAREN }
	'{'            { TOK_LBRACE }
	'}'            { TOK_RBRACE }
	'%'            { TOK_MOD }
	'!='           { TOK_NOT_EQUAL }
	'=='           { TOK_EQUALS_EQUALS }
	'='            { TOK_EQUALS }
	'<='           { TOK_LESS_OR_EQUAL }
	'>='           { TOK_GREATER_OR_EQUAL }
	'<'            { TOK_LESS_THAN }
	'>'            { TOK_GREATER_THAN }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Start           rules 1, 2
	Func            rules 3, 4, 5, 6, 7
	FuncAssign      rules 8, 9
	FuncAssignBlock rules 10, 11, 12
	Stm             rules 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24
	ReturnStm       rule  25
	StmBlock        rules 26, 27
	Exp             rules 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45
	ExpCall         rule  46
	ExpCallBlock    rules 47, 48, 49

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            shift, and enter state 3
	bool           shift, and enter state 4

	Start          goto state 5
	Func           goto state 2

State 1


	int            shift, and enter state 3
	bool           shift, and enter state 4

	Func           goto state 2

State 2

	Start -> Func .                                     (rule 1)

	int            reduce using rule 1
	bool           reduce using rule 1
	%eof           reduce using rule 1


State 3

	Func -> int . string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}'    (rule 3)
	Func -> int . string '(' FuncAssignBlock ')' '{' ReturnStm '}'    (rule 5)
	Func -> int . main '(' ')' '{' StmBlock '}'         (rule 7)

	string         shift, and enter state 8
	main           shift, and enter state 9


State 4

	Func -> bool . string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}'    (rule 4)
	Func -> bool . string '(' FuncAssignBlock ')' '{' ReturnStm '}'    (rule 6)

	string         shift, and enter state 7


State 5

	%start_parser -> Start .                            (rule 0)
	Start -> Start . Func                               (rule 2)

	int            shift, and enter state 3
	bool           shift, and enter state 4
	%eof           accept

	Func           goto state 6

State 6

	Start -> Start Func .                               (rule 2)

	int            reduce using rule 2
	bool           reduce using rule 2
	%eof           reduce using rule 2


State 7

	Func -> bool string . '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}'    (rule 4)
	Func -> bool string . '(' FuncAssignBlock ')' '{' ReturnStm '}'    (rule 6)

	'('            shift, and enter state 12


State 8

	Func -> int string . '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}'    (rule 3)
	Func -> int string . '(' FuncAssignBlock ')' '{' ReturnStm '}'    (rule 5)

	'('            shift, and enter state 11


State 9

	Func -> int main . '(' ')' '{' StmBlock '}'         (rule 7)

	'('            shift, and enter state 10


State 10

	Func -> int main '(' . ')' '{' StmBlock '}'         (rule 7)

	')'            shift, and enter state 18


State 11

	Func -> int string '(' . FuncAssignBlock ')' '{' StmBlock ReturnStm '}'    (rule 3)
	Func -> int string '(' . FuncAssignBlock ')' '{' ReturnStm '}'    (rule 5)

	int            shift, and enter state 15
	bool           shift, and enter state 16
	','            reduce using rule 10
	')'            reduce using rule 10

	FuncAssign     goto state 13
	FuncAssignBlockgoto state 17

State 12

	Func -> bool string '(' . FuncAssignBlock ')' '{' StmBlock ReturnStm '}'    (rule 4)
	Func -> bool string '(' . FuncAssignBlock ')' '{' ReturnStm '}'    (rule 6)

	int            shift, and enter state 15
	bool           shift, and enter state 16
	','            reduce using rule 10
	')'            reduce using rule 10

	FuncAssign     goto state 13
	FuncAssignBlockgoto state 14

State 13

	FuncAssignBlock -> FuncAssign .                     (rule 11)

	','            reduce using rule 11
	')'            reduce using rule 11


State 14

	Func -> bool string '(' FuncAssignBlock . ')' '{' StmBlock ReturnStm '}'    (rule 4)
	Func -> bool string '(' FuncAssignBlock . ')' '{' ReturnStm '}'    (rule 6)
	FuncAssignBlock -> FuncAssignBlock . ',' FuncAssign    (rule 12)

	','            shift, and enter state 20
	')'            shift, and enter state 24


State 15

	FuncAssign -> int . string                          (rule 8)

	string         shift, and enter state 23


State 16

	FuncAssign -> bool . string                         (rule 9)

	string         shift, and enter state 22


State 17

	Func -> int string '(' FuncAssignBlock . ')' '{' StmBlock ReturnStm '}'    (rule 3)
	Func -> int string '(' FuncAssignBlock . ')' '{' ReturnStm '}'    (rule 5)
	FuncAssignBlock -> FuncAssignBlock . ',' FuncAssign    (rule 12)

	','            shift, and enter state 20
	')'            shift, and enter state 21


State 18

	Func -> int main '(' ')' . '{' StmBlock '}'         (rule 7)

	'{'            shift, and enter state 19


State 19

	Func -> int main '(' ')' '{' . StmBlock '}'         (rule 7)

	int            shift, and enter state 31
	string         shift, and enter state 32
	if             shift, and enter state 33
	return         shift, and enter state 34
	while          shift, and enter state 35
	bool           shift, and enter state 36
	print_int      shift, and enter state 37
	'{'            shift, and enter state 38

	Stm            goto state 28
	ReturnStm      goto state 29
	StmBlock       goto state 30

State 20

	FuncAssignBlock -> FuncAssignBlock ',' . FuncAssign    (rule 12)

	int            shift, and enter state 15
	bool           shift, and enter state 16

	FuncAssign     goto state 27

State 21

	Func -> int string '(' FuncAssignBlock ')' . '{' StmBlock ReturnStm '}'    (rule 3)
	Func -> int string '(' FuncAssignBlock ')' . '{' ReturnStm '}'    (rule 5)

	'{'            shift, and enter state 26


State 22

	FuncAssign -> bool string .                         (rule 9)

	','            reduce using rule 9
	')'            reduce using rule 9


State 23

	FuncAssign -> int string .                          (rule 8)

	','            reduce using rule 8
	')'            reduce using rule 8


State 24

	Func -> bool string '(' FuncAssignBlock ')' . '{' StmBlock ReturnStm '}'    (rule 4)
	Func -> bool string '(' FuncAssignBlock ')' . '{' ReturnStm '}'    (rule 6)

	'{'            shift, and enter state 25


State 25

	Func -> bool string '(' FuncAssignBlock ')' '{' . StmBlock ReturnStm '}'    (rule 4)
	Func -> bool string '(' FuncAssignBlock ')' '{' . ReturnStm '}'    (rule 6)

	int            shift, and enter state 31
	string         shift, and enter state 32
	if             shift, and enter state 33
	return         shift, and enter state 34
	while          shift, and enter state 35
	bool           shift, and enter state 36
	print_int      shift, and enter state 37
	'{'            shift, and enter state 38

	Stm            goto state 28
	ReturnStm      goto state 58
	StmBlock       goto state 59

State 26

	Func -> int string '(' FuncAssignBlock ')' '{' . StmBlock ReturnStm '}'    (rule 3)
	Func -> int string '(' FuncAssignBlock ')' '{' . ReturnStm '}'    (rule 5)

	int            shift, and enter state 31
	string         shift, and enter state 32
	if             shift, and enter state 33
	return         shift, and enter state 34
	while          shift, and enter state 35
	bool           shift, and enter state 36
	print_int      shift, and enter state 37
	'{'            shift, and enter state 38

	Stm            goto state 28
	ReturnStm      goto state 56
	StmBlock       goto state 57

State 27

	FuncAssignBlock -> FuncAssignBlock ',' FuncAssign .    (rule 12)

	','            reduce using rule 12
	')'            reduce using rule 12


State 28

	StmBlock -> Stm .                                   (rule 26)

	int            reduce using rule 26
	string         reduce using rule 26
	if             reduce using rule 26
	return         reduce using rule 26
	while          reduce using rule 26
	bool           reduce using rule 26
	print_int      reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26


State 29

	Stm -> ReturnStm .                                  (rule 24)

	int            reduce using rule 24
	string         reduce using rule 24
	if             reduce using rule 24
	else           reduce using rule 24
	return         reduce using rule 24
	while          reduce using rule 24
	bool           reduce using rule 24
	print_int      reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24


State 30

	Func -> int main '(' ')' '{' StmBlock . '}'         (rule 7)
	StmBlock -> StmBlock . Stm                          (rule 27)

	int            shift, and enter state 31
	string         shift, and enter state 32
	if             shift, and enter state 33
	return         shift, and enter state 34
	while          shift, and enter state 35
	bool           shift, and enter state 36
	print_int      shift, and enter state 37
	'{'            shift, and enter state 38
	'}'            shift, and enter state 55

	Stm            goto state 54
	ReturnStm      goto state 29

State 31

	Stm -> int . string ';'                             (rule 14)
	Stm -> int . string '=' Exp ';'                     (rule 15)

	string         shift, and enter state 53


State 32

	Stm -> string . '=' Exp ';'                         (rule 13)
	Stm -> string . '(' ExpCallBlock ')' ';'            (rule 22)

	'('            shift, and enter state 51
	'='            shift, and enter state 52


State 33

	Stm -> if . Exp Stm                                 (rule 18)
	Stm -> if . Exp Stm else Stm                        (rule 19)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 50

State 34

	ReturnStm -> return . Exp ';'                       (rule 25)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 49

State 35

	Stm -> while . Exp Stm                              (rule 20)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 42

State 36

	Stm -> bool . string ';'                            (rule 16)
	Stm -> bool . string '=' Exp ';'                    (rule 17)

	string         shift, and enter state 41


State 37

	Stm -> print_int . '(' Exp ')' ';'                  (rule 23)

	'('            shift, and enter state 40


State 38

	Stm -> '{' . StmBlock '}'                           (rule 21)

	int            shift, and enter state 31
	string         shift, and enter state 32
	if             shift, and enter state 33
	return         shift, and enter state 34
	while          shift, and enter state 35
	bool           shift, and enter state 36
	print_int      shift, and enter state 37
	'{'            shift, and enter state 38

	Stm            goto state 28
	ReturnStm      goto state 29
	StmBlock       goto state 39

State 39

	Stm -> '{' StmBlock . '}'                           (rule 21)
	StmBlock -> StmBlock . Stm                          (rule 27)

	int            shift, and enter state 31
	string         shift, and enter state 32
	if             shift, and enter state 33
	return         shift, and enter state 34
	while          shift, and enter state 35
	bool           shift, and enter state 36
	print_int      shift, and enter state 37
	'{'            shift, and enter state 38
	'}'            shift, and enter state 90

	Stm            goto state 54
	ReturnStm      goto state 29

State 40

	Stm -> print_int '(' . Exp ')' ';'                  (rule 23)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 89

State 41

	Stm -> bool string . ';'                            (rule 16)
	Stm -> bool string . '=' Exp ';'                    (rule 17)

	';'            shift, and enter state 87
	'='            shift, and enter state 88


State 42

	Stm -> while Exp . Stm                              (rule 20)
	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	int            shift, and enter state 31
	string         shift, and enter state 32
	if             shift, and enter state 33
	return         shift, and enter state 34
	while          shift, and enter state 35
	bool           shift, and enter state 36
	print_int      shift, and enter state 37
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	'{'            shift, and enter state 38
	'%'            shift, and enter state 75
	'!='           shift, and enter state 76
	'=='           shift, and enter state 77
	'<='           shift, and enter state 78
	'>='           shift, and enter state 79
	'<'            shift, and enter state 80
	'>'            shift, and enter state 81

	Stm            goto state 86
	ReturnStm      goto state 29

State 43

	Exp -> num .                                        (rule 28)

	int            reduce using rule 28
	string         reduce using rule 28
	if             reduce using rule 28
	return         reduce using rule 28
	while          reduce using rule 28
	bool           reduce using rule 28
	print_int      reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	','            reduce using rule 28
	';'            reduce using rule 28
	')'            reduce using rule 28
	'{'            reduce using rule 28
	'%'            reduce using rule 28
	'!='           reduce using rule 28
	'=='           reduce using rule 28
	'<='           reduce using rule 28
	'>='           reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28


State 44

	Exp -> string .                                     (rule 29)
	Exp -> string . '(' ExpCallBlock ')'                (rule 44)

	int            reduce using rule 29
	string         reduce using rule 29
	if             reduce using rule 29
	return         reduce using rule 29
	while          reduce using rule 29
	bool           reduce using rule 29
	print_int      reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	','            reduce using rule 29
	';'            reduce using rule 29
	'('            shift, and enter state 85
	')'            reduce using rule 29
	'{'            reduce using rule 29
	'%'            reduce using rule 29
	'!='           reduce using rule 29
	'=='           reduce using rule 29
	'<='           reduce using rule 29
	'>='           reduce using rule 29
	'<'            reduce using rule 29
	'>'            reduce using rule 29


State 45

	Exp -> true .                                       (rule 30)

	int            reduce using rule 30
	string         reduce using rule 30
	if             reduce using rule 30
	return         reduce using rule 30
	while          reduce using rule 30
	bool           reduce using rule 30
	print_int      reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	','            reduce using rule 30
	';'            reduce using rule 30
	')'            reduce using rule 30
	'{'            reduce using rule 30
	'%'            reduce using rule 30
	'!='           reduce using rule 30
	'=='           reduce using rule 30
	'<='           reduce using rule 30
	'>='           reduce using rule 30
	'<'            reduce using rule 30
	'>'            reduce using rule 30


State 46

	Exp -> false .                                      (rule 31)

	int            reduce using rule 31
	string         reduce using rule 31
	if             reduce using rule 31
	return         reduce using rule 31
	while          reduce using rule 31
	bool           reduce using rule 31
	print_int      reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	','            reduce using rule 31
	';'            reduce using rule 31
	')'            reduce using rule 31
	'{'            reduce using rule 31
	'%'            reduce using rule 31
	'!='           reduce using rule 31
	'=='           reduce using rule 31
	'<='           reduce using rule 31
	'>='           reduce using rule 31
	'<'            reduce using rule 31
	'>'            reduce using rule 31


State 47

	Exp -> scan_int . '(' ')'                           (rule 45)

	'('            shift, and enter state 84


State 48

	Exp -> '(' . Exp ')'                                (rule 32)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 83

State 49

	ReturnStm -> return Exp . ';'                       (rule 25)
	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	';'            shift, and enter state 82
	'%'            shift, and enter state 75
	'!='           shift, and enter state 76
	'=='           shift, and enter state 77
	'<='           shift, and enter state 78
	'>='           shift, and enter state 79
	'<'            shift, and enter state 80
	'>'            shift, and enter state 81


State 50

	Stm -> if Exp . Stm                                 (rule 18)
	Stm -> if Exp . Stm else Stm                        (rule 19)
	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	int            shift, and enter state 31
	string         shift, and enter state 32
	if             shift, and enter state 33
	return         shift, and enter state 34
	while          shift, and enter state 35
	bool           shift, and enter state 36
	print_int      shift, and enter state 37
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	'{'            shift, and enter state 38
	'%'            shift, and enter state 75
	'!='           shift, and enter state 76
	'=='           shift, and enter state 77
	'<='           shift, and enter state 78
	'>='           shift, and enter state 79
	'<'            shift, and enter state 80
	'>'            shift, and enter state 81

	Stm            goto state 70
	ReturnStm      goto state 29

State 51

	Stm -> string '(' . ExpCallBlock ')' ';'            (rule 22)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	','            reduce using rule 47
	'('            shift, and enter state 48
	')'            reduce using rule 47

	Exp            goto state 67
	ExpCall        goto state 68
	ExpCallBlock   goto state 69

State 52

	Stm -> string '=' . Exp ';'                         (rule 13)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 66

State 53

	Stm -> int string . ';'                             (rule 14)
	Stm -> int string . '=' Exp ';'                     (rule 15)

	';'            shift, and enter state 64
	'='            shift, and enter state 65


State 54

	StmBlock -> StmBlock Stm .                          (rule 27)

	int            reduce using rule 27
	string         reduce using rule 27
	if             reduce using rule 27
	return         reduce using rule 27
	while          reduce using rule 27
	bool           reduce using rule 27
	print_int      reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27


State 55

	Func -> int main '(' ')' '{' StmBlock '}' .         (rule 7)

	int            reduce using rule 7
	bool           reduce using rule 7
	%eof           reduce using rule 7


State 56

	Func -> int string '(' FuncAssignBlock ')' '{' ReturnStm . '}'    (rule 5)
	Stm -> ReturnStm .                                  (rule 24)

	int            reduce using rule 24
	string         reduce using rule 24
	if             reduce using rule 24
	return         reduce using rule 24
	while          reduce using rule 24
	bool           reduce using rule 24
	print_int      reduce using rule 24
	'{'            reduce using rule 24
	'}'            shift, and enter state 63


State 57

	Func -> int string '(' FuncAssignBlock ')' '{' StmBlock . ReturnStm '}'    (rule 3)
	StmBlock -> StmBlock . Stm                          (rule 27)

	int            shift, and enter state 31
	string         shift, and enter state 32
	if             shift, and enter state 33
	return         shift, and enter state 34
	while          shift, and enter state 35
	bool           shift, and enter state 36
	print_int      shift, and enter state 37
	'{'            shift, and enter state 38

	Stm            goto state 54
	ReturnStm      goto state 62

State 58

	Func -> bool string '(' FuncAssignBlock ')' '{' ReturnStm . '}'    (rule 6)
	Stm -> ReturnStm .                                  (rule 24)

	int            reduce using rule 24
	string         reduce using rule 24
	if             reduce using rule 24
	return         reduce using rule 24
	while          reduce using rule 24
	bool           reduce using rule 24
	print_int      reduce using rule 24
	'{'            reduce using rule 24
	'}'            shift, and enter state 61


State 59

	Func -> bool string '(' FuncAssignBlock ')' '{' StmBlock . ReturnStm '}'    (rule 4)
	StmBlock -> StmBlock . Stm                          (rule 27)

	int            shift, and enter state 31
	string         shift, and enter state 32
	if             shift, and enter state 33
	return         shift, and enter state 34
	while          shift, and enter state 35
	bool           shift, and enter state 36
	print_int      shift, and enter state 37
	'{'            shift, and enter state 38

	Stm            goto state 54
	ReturnStm      goto state 60

State 60

	Func -> bool string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm . '}'    (rule 4)
	Stm -> ReturnStm .                                  (rule 24)

	int            reduce using rule 24
	string         reduce using rule 24
	if             reduce using rule 24
	return         reduce using rule 24
	while          reduce using rule 24
	bool           reduce using rule 24
	print_int      reduce using rule 24
	'{'            reduce using rule 24
	'}'            shift, and enter state 113


State 61

	Func -> bool string '(' FuncAssignBlock ')' '{' ReturnStm '}' .    (rule 6)

	int            reduce using rule 6
	bool           reduce using rule 6
	%eof           reduce using rule 6


State 62

	Func -> int string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm . '}'    (rule 3)
	Stm -> ReturnStm .                                  (rule 24)

	int            reduce using rule 24
	string         reduce using rule 24
	if             reduce using rule 24
	return         reduce using rule 24
	while          reduce using rule 24
	bool           reduce using rule 24
	print_int      reduce using rule 24
	'{'            reduce using rule 24
	'}'            shift, and enter state 112


State 63

	Func -> int string '(' FuncAssignBlock ')' '{' ReturnStm '}' .    (rule 5)

	int            reduce using rule 5
	bool           reduce using rule 5
	%eof           reduce using rule 5


State 64

	Stm -> int string ';' .                             (rule 14)

	int            reduce using rule 14
	string         reduce using rule 14
	if             reduce using rule 14
	else           reduce using rule 14
	return         reduce using rule 14
	while          reduce using rule 14
	bool           reduce using rule 14
	print_int      reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14


State 65

	Stm -> int string '=' . Exp ';'                     (rule 15)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 111

State 66

	Stm -> string '=' Exp . ';'                         (rule 13)
	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	';'            shift, and enter state 110
	'%'            shift, and enter state 75
	'!='           shift, and enter state 76
	'=='           shift, and enter state 77
	'<='           shift, and enter state 78
	'>='           shift, and enter state 79
	'<'            shift, and enter state 80
	'>'            shift, and enter state 81


State 67

	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)
	ExpCall -> Exp .                                    (rule 46)

	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	','            reduce using rule 46
	')'            reduce using rule 46
	'%'            shift, and enter state 75
	'!='           shift, and enter state 76
	'=='           shift, and enter state 77
	'<='           shift, and enter state 78
	'>='           shift, and enter state 79
	'<'            shift, and enter state 80
	'>'            shift, and enter state 81


State 68

	ExpCallBlock -> ExpCall .                           (rule 48)

	','            reduce using rule 48
	')'            reduce using rule 48


State 69

	Stm -> string '(' ExpCallBlock . ')' ';'            (rule 22)
	ExpCallBlock -> ExpCallBlock . ',' ExpCall          (rule 49)

	','            shift, and enter state 108
	')'            shift, and enter state 109


State 70

	Stm -> if Exp Stm .                                 (rule 18)
	Stm -> if Exp Stm . else Stm                        (rule 19)

	int            reduce using rule 18
	string         reduce using rule 18
	if             reduce using rule 18
	else           shift, and enter state 107
			(reduce using rule 18)

	return         reduce using rule 18
	while          reduce using rule 18
	bool           reduce using rule 18
	print_int      reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18


State 71

	Exp -> Exp '+' . Exp                                (rule 33)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 106

State 72

	Exp -> Exp '-' . Exp                                (rule 34)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 105

State 73

	Exp -> Exp '*' . Exp                                (rule 35)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 104

State 74

	Exp -> Exp '/' . Exp                                (rule 36)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 103

State 75

	Exp -> Exp '%' . Exp                                (rule 37)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 102

State 76

	Exp -> Exp '!=' . Exp                               (rule 43)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 101

State 77

	Exp -> Exp '==' . Exp                               (rule 42)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 100

State 78

	Exp -> Exp '<=' . Exp                               (rule 38)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 99

State 79

	Exp -> Exp '>=' . Exp                               (rule 39)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 98

State 80

	Exp -> Exp '<' . Exp                                (rule 40)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 97

State 81

	Exp -> Exp '>' . Exp                                (rule 41)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 96

State 82

	ReturnStm -> return Exp ';' .                       (rule 25)

	int            reduce using rule 25
	string         reduce using rule 25
	if             reduce using rule 25
	else           reduce using rule 25
	return         reduce using rule 25
	while          reduce using rule 25
	bool           reduce using rule 25
	print_int      reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25


State 83

	Exp -> '(' Exp . ')'                                (rule 32)
	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	')'            shift, and enter state 95
	'%'            shift, and enter state 75
	'!='           shift, and enter state 76
	'=='           shift, and enter state 77
	'<='           shift, and enter state 78
	'>='           shift, and enter state 79
	'<'            shift, and enter state 80
	'>'            shift, and enter state 81


State 84

	Exp -> scan_int '(' . ')'                           (rule 45)

	')'            shift, and enter state 94


State 85

	Exp -> string '(' . ExpCallBlock ')'                (rule 44)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	','            reduce using rule 47
	'('            shift, and enter state 48
	')'            reduce using rule 47

	Exp            goto state 67
	ExpCall        goto state 68
	ExpCallBlock   goto state 93

State 86

	Stm -> while Exp Stm .                              (rule 20)

	int            reduce using rule 20
	string         reduce using rule 20
	if             reduce using rule 20
	else           reduce using rule 20
	return         reduce using rule 20
	while          reduce using rule 20
	bool           reduce using rule 20
	print_int      reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20


State 87

	Stm -> bool string ';' .                            (rule 16)

	int            reduce using rule 16
	string         reduce using rule 16
	if             reduce using rule 16
	else           reduce using rule 16
	return         reduce using rule 16
	while          reduce using rule 16
	bool           reduce using rule 16
	print_int      reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16


State 88

	Stm -> bool string '=' . Exp ';'                    (rule 17)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 92

State 89

	Stm -> print_int '(' Exp . ')' ';'                  (rule 23)
	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	')'            shift, and enter state 91
	'%'            shift, and enter state 75
	'!='           shift, and enter state 76
	'=='           shift, and enter state 77
	'<='           shift, and enter state 78
	'>='           shift, and enter state 79
	'<'            shift, and enter state 80
	'>'            shift, and enter state 81


State 90

	Stm -> '{' StmBlock '}' .                           (rule 21)

	int            reduce using rule 21
	string         reduce using rule 21
	if             reduce using rule 21
	else           reduce using rule 21
	return         reduce using rule 21
	while          reduce using rule 21
	bool           reduce using rule 21
	print_int      reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21


State 91

	Stm -> print_int '(' Exp ')' . ';'                  (rule 23)

	';'            shift, and enter state 120


State 92

	Stm -> bool string '=' Exp . ';'                    (rule 17)
	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	';'            shift, and enter state 119
	'%'            shift, and enter state 75
	'!='           shift, and enter state 76
	'=='           shift, and enter state 77
	'<='           shift, and enter state 78
	'>='           shift, and enter state 79
	'<'            shift, and enter state 80
	'>'            shift, and enter state 81


State 93

	Exp -> string '(' ExpCallBlock . ')'                (rule 44)
	ExpCallBlock -> ExpCallBlock . ',' ExpCall          (rule 49)

	','            shift, and enter state 108
	')'            shift, and enter state 118


State 94

	Exp -> scan_int '(' ')' .                           (rule 45)

	int            reduce using rule 45
	string         reduce using rule 45
	if             reduce using rule 45
	return         reduce using rule 45
	while          reduce using rule 45
	bool           reduce using rule 45
	print_int      reduce using rule 45
	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'*'            reduce using rule 45
	'/'            reduce using rule 45
	','            reduce using rule 45
	';'            reduce using rule 45
	')'            reduce using rule 45
	'{'            reduce using rule 45
	'%'            reduce using rule 45
	'!='           reduce using rule 45
	'=='           reduce using rule 45
	'<='           reduce using rule 45
	'>='           reduce using rule 45
	'<'            reduce using rule 45
	'>'            reduce using rule 45


State 95

	Exp -> '(' Exp ')' .                                (rule 32)

	int            reduce using rule 32
	string         reduce using rule 32
	if             reduce using rule 32
	return         reduce using rule 32
	while          reduce using rule 32
	bool           reduce using rule 32
	print_int      reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	','            reduce using rule 32
	';'            reduce using rule 32
	')'            reduce using rule 32
	'{'            reduce using rule 32
	'%'            reduce using rule 32
	'!='           reduce using rule 32
	'=='           reduce using rule 32
	'<='           reduce using rule 32
	'>='           reduce using rule 32
	'<'            reduce using rule 32
	'>'            reduce using rule 32


State 96

	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp '>' Exp .                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	int            reduce using rule 41
	string         reduce using rule 41
	if             reduce using rule 41
	return         reduce using rule 41
	while          reduce using rule 41
	bool           reduce using rule 41
	print_int      reduce using rule 41
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	','            reduce using rule 41
	';'            reduce using rule 41
	')'            reduce using rule 41
	'{'            reduce using rule 41
	'%'            shift, and enter state 75
	'!='           fail
	'=='           fail
	'<='           fail
	'>='           fail
	'<'            fail
	'>'            fail


State 97

	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp '<' Exp .                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	int            reduce using rule 40
	string         reduce using rule 40
	if             reduce using rule 40
	return         reduce using rule 40
	while          reduce using rule 40
	bool           reduce using rule 40
	print_int      reduce using rule 40
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	','            reduce using rule 40
	';'            reduce using rule 40
	')'            reduce using rule 40
	'{'            reduce using rule 40
	'%'            shift, and enter state 75
	'!='           fail
	'=='           fail
	'<='           fail
	'>='           fail
	'<'            fail
	'>'            fail


State 98

	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp '>=' Exp .                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	int            reduce using rule 39
	string         reduce using rule 39
	if             reduce using rule 39
	return         reduce using rule 39
	while          reduce using rule 39
	bool           reduce using rule 39
	print_int      reduce using rule 39
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	','            reduce using rule 39
	';'            reduce using rule 39
	')'            reduce using rule 39
	'{'            reduce using rule 39
	'%'            shift, and enter state 75
	'!='           fail
	'=='           fail
	'<='           fail
	'>='           fail
	'<'            fail
	'>'            fail


State 99

	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp '<=' Exp .                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	int            reduce using rule 38
	string         reduce using rule 38
	if             reduce using rule 38
	return         reduce using rule 38
	while          reduce using rule 38
	bool           reduce using rule 38
	print_int      reduce using rule 38
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	','            reduce using rule 38
	';'            reduce using rule 38
	')'            reduce using rule 38
	'{'            reduce using rule 38
	'%'            shift, and enter state 75
	'!='           fail
	'=='           fail
	'<='           fail
	'>='           fail
	'<'            fail
	'>'            fail


State 100

	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp '==' Exp .                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	int            reduce using rule 42
	string         reduce using rule 42
	if             reduce using rule 42
	return         reduce using rule 42
	while          reduce using rule 42
	bool           reduce using rule 42
	print_int      reduce using rule 42
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	','            reduce using rule 42
	';'            reduce using rule 42
	')'            reduce using rule 42
	'{'            reduce using rule 42
	'%'            shift, and enter state 75
	'!='           fail
	'=='           fail
	'<='           fail
	'>='           fail
	'<'            fail
	'>'            fail


State 101

	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)
	Exp -> Exp '!=' Exp .                               (rule 43)

	int            reduce using rule 43
	string         reduce using rule 43
	if             reduce using rule 43
	return         reduce using rule 43
	while          reduce using rule 43
	bool           reduce using rule 43
	print_int      reduce using rule 43
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	','            reduce using rule 43
	';'            reduce using rule 43
	')'            reduce using rule 43
	'{'            reduce using rule 43
	'%'            shift, and enter state 75
	'!='           fail
	'=='           fail
	'<='           fail
	'>='           fail
	'<'            fail
	'>'            fail


State 102

	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp '%' Exp .                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	int            reduce using rule 37
	string         reduce using rule 37
	if             reduce using rule 37
	return         reduce using rule 37
	while          reduce using rule 37
	bool           reduce using rule 37
	print_int      reduce using rule 37
	'+'            reduce using rule 37
	'-'            reduce using rule 37
	'*'            reduce using rule 37
	'/'            reduce using rule 37
	','            reduce using rule 37
	';'            reduce using rule 37
	')'            reduce using rule 37
	'{'            reduce using rule 37
	'%'            reduce using rule 37
	'!='           reduce using rule 37
	'=='           reduce using rule 37
	'<='           reduce using rule 37
	'>='           reduce using rule 37
	'<'            reduce using rule 37
	'>'            reduce using rule 37


State 103

	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp '/' Exp .                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	int            reduce using rule 36
	string         reduce using rule 36
	if             reduce using rule 36
	return         reduce using rule 36
	while          reduce using rule 36
	bool           reduce using rule 36
	print_int      reduce using rule 36
	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            reduce using rule 36
	'/'            reduce using rule 36
	','            reduce using rule 36
	';'            reduce using rule 36
	')'            reduce using rule 36
	'{'            reduce using rule 36
	'%'            reduce using rule 36
	'!='           reduce using rule 36
	'=='           reduce using rule 36
	'<='           reduce using rule 36
	'>='           reduce using rule 36
	'<'            reduce using rule 36
	'>'            reduce using rule 36


State 104

	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp '*' Exp .                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	int            reduce using rule 35
	string         reduce using rule 35
	if             reduce using rule 35
	return         reduce using rule 35
	while          reduce using rule 35
	bool           reduce using rule 35
	print_int      reduce using rule 35
	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	','            reduce using rule 35
	';'            reduce using rule 35
	')'            reduce using rule 35
	'{'            reduce using rule 35
	'%'            reduce using rule 35
	'!='           reduce using rule 35
	'=='           reduce using rule 35
	'<='           reduce using rule 35
	'>='           reduce using rule 35
	'<'            reduce using rule 35
	'>'            reduce using rule 35


State 105

	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp '-' Exp .                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	int            reduce using rule 34
	string         reduce using rule 34
	if             reduce using rule 34
	return         reduce using rule 34
	while          reduce using rule 34
	bool           reduce using rule 34
	print_int      reduce using rule 34
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	','            reduce using rule 34
	';'            reduce using rule 34
	')'            reduce using rule 34
	'{'            reduce using rule 34
	'%'            shift, and enter state 75
	'!='           reduce using rule 34
	'=='           reduce using rule 34
	'<='           reduce using rule 34
	'>='           reduce using rule 34
	'<'            reduce using rule 34
	'>'            reduce using rule 34


State 106

	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp '+' Exp .                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	int            reduce using rule 33
	string         reduce using rule 33
	if             reduce using rule 33
	return         reduce using rule 33
	while          reduce using rule 33
	bool           reduce using rule 33
	print_int      reduce using rule 33
	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	','            reduce using rule 33
	';'            reduce using rule 33
	')'            reduce using rule 33
	'{'            reduce using rule 33
	'%'            shift, and enter state 75
	'!='           reduce using rule 33
	'=='           reduce using rule 33
	'<='           reduce using rule 33
	'>='           reduce using rule 33
	'<'            reduce using rule 33
	'>'            reduce using rule 33


State 107

	Stm -> if Exp Stm else . Stm                        (rule 19)

	int            shift, and enter state 31
	string         shift, and enter state 32
	if             shift, and enter state 33
	return         shift, and enter state 34
	while          shift, and enter state 35
	bool           shift, and enter state 36
	print_int      shift, and enter state 37
	'{'            shift, and enter state 38

	Stm            goto state 117
	ReturnStm      goto state 29

State 108

	ExpCallBlock -> ExpCallBlock ',' . ExpCall          (rule 49)

	num            shift, and enter state 43
	string         shift, and enter state 44
	true           shift, and enter state 45
	false          shift, and enter state 46
	scan_int       shift, and enter state 47
	'('            shift, and enter state 48

	Exp            goto state 67
	ExpCall        goto state 116

State 109

	Stm -> string '(' ExpCallBlock ')' . ';'            (rule 22)

	';'            shift, and enter state 115


State 110

	Stm -> string '=' Exp ';' .                         (rule 13)

	int            reduce using rule 13
	string         reduce using rule 13
	if             reduce using rule 13
	else           reduce using rule 13
	return         reduce using rule 13
	while          reduce using rule 13
	bool           reduce using rule 13
	print_int      reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13


State 111

	Stm -> int string '=' Exp . ';'                     (rule 15)
	Exp -> Exp . '+' Exp                                (rule 33)
	Exp -> Exp . '-' Exp                                (rule 34)
	Exp -> Exp . '*' Exp                                (rule 35)
	Exp -> Exp . '/' Exp                                (rule 36)
	Exp -> Exp . '%' Exp                                (rule 37)
	Exp -> Exp . '<=' Exp                               (rule 38)
	Exp -> Exp . '>=' Exp                               (rule 39)
	Exp -> Exp . '<' Exp                                (rule 40)
	Exp -> Exp . '>' Exp                                (rule 41)
	Exp -> Exp . '==' Exp                               (rule 42)
	Exp -> Exp . '!=' Exp                               (rule 43)

	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'*'            shift, and enter state 73
	'/'            shift, and enter state 74
	';'            shift, and enter state 114
	'%'            shift, and enter state 75
	'!='           shift, and enter state 76
	'=='           shift, and enter state 77
	'<='           shift, and enter state 78
	'>='           shift, and enter state 79
	'<'            shift, and enter state 80
	'>'            shift, and enter state 81


State 112

	Func -> int string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}' .    (rule 3)

	int            reduce using rule 3
	bool           reduce using rule 3
	%eof           reduce using rule 3


State 113

	Func -> bool string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}' .    (rule 4)

	int            reduce using rule 4
	bool           reduce using rule 4
	%eof           reduce using rule 4


State 114

	Stm -> int string '=' Exp ';' .                     (rule 15)

	int            reduce using rule 15
	string         reduce using rule 15
	if             reduce using rule 15
	else           reduce using rule 15
	return         reduce using rule 15
	while          reduce using rule 15
	bool           reduce using rule 15
	print_int      reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15


State 115

	Stm -> string '(' ExpCallBlock ')' ';' .            (rule 22)

	int            reduce using rule 22
	string         reduce using rule 22
	if             reduce using rule 22
	else           reduce using rule 22
	return         reduce using rule 22
	while          reduce using rule 22
	bool           reduce using rule 22
	print_int      reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22


State 116

	ExpCallBlock -> ExpCallBlock ',' ExpCall .          (rule 49)

	','            reduce using rule 49
	')'            reduce using rule 49


State 117

	Stm -> if Exp Stm else Stm .                        (rule 19)

	int            reduce using rule 19
	string         reduce using rule 19
	if             reduce using rule 19
	else           reduce using rule 19
	return         reduce using rule 19
	while          reduce using rule 19
	bool           reduce using rule 19
	print_int      reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19


State 118

	Exp -> string '(' ExpCallBlock ')' .                (rule 44)

	int            reduce using rule 44
	string         reduce using rule 44
	if             reduce using rule 44
	return         reduce using rule 44
	while          reduce using rule 44
	bool           reduce using rule 44
	print_int      reduce using rule 44
	'+'            reduce using rule 44
	'-'            reduce using rule 44
	'*'            reduce using rule 44
	'/'            reduce using rule 44
	','            reduce using rule 44
	';'            reduce using rule 44
	')'            reduce using rule 44
	'{'            reduce using rule 44
	'%'            reduce using rule 44
	'!='           reduce using rule 44
	'=='           reduce using rule 44
	'<='           reduce using rule 44
	'>='           reduce using rule 44
	'<'            reduce using rule 44
	'>'            reduce using rule 44


State 119

	Stm -> bool string '=' Exp ';' .                    (rule 17)

	int            reduce using rule 17
	string         reduce using rule 17
	if             reduce using rule 17
	else           reduce using rule 17
	return         reduce using rule 17
	while          reduce using rule 17
	bool           reduce using rule 17
	print_int      reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17


State 120

	Stm -> print_int '(' Exp ')' ';' .                  (rule 23)

	int            reduce using rule 23
	string         reduce using rule 23
	if             reduce using rule 23
	else           reduce using rule 23
	return         reduce using rule 23
	while          reduce using rule 23
	bool           reduce using rule 23
	print_int      reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 50
Number of terminals: 33
Number of non-terminals: 11
Number of states: 121
