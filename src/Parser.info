-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from src/Parser.y
-----------------------------------------------------------------------------

state 46 contains 1 shift/reduce conflicts.
state 53 contains 6 shift/reduce conflicts.
state 65 contains 9 shift/reduce conflicts.
state 80 contains 6 shift/reduce conflicts.

terminal then is unused
terminal '.' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Start                             (0)
	Start -> Func                                      (1)
	Start -> Start Func                                (2)
	Func -> int string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}'   (3)
	Func -> bool string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}'   (4)
	Func -> int string '(' FuncAssignBlock ')' '{' ReturnStm '}'   (5)
	Func -> bool string '(' FuncAssignBlock ')' '{' ReturnStm '}'   (6)
	FuncAssign -> int string                           (7)
	FuncAssign -> bool string                          (8)
	FuncAssignBlock ->                                 (9)
	FuncAssignBlock -> FuncAssign                      (10)
	FuncAssignBlock -> FuncAssignBlock ',' FuncAssign   (11)
	Stm -> string '=' Exp ';'                          (12)
	Stm -> int string ';'                              (13)
	Stm -> int string '=' Exp ';'                      (14)
	Stm -> bool string ';'                             (15)
	Stm -> bool string '=' Exp ';'                     (16)
	Stm -> if Exp Stm Stm                              (17)
	Stm -> if Exp Stm                                  (18)
	Stm -> if Exp Stm else Stm                         (19)
	Stm -> while Exp Stm                               (20)
	Stm -> '{' StmBlock '}'                            (21)
	Stm -> string '(' ExpCallBlock ')' ';'             (22)
	Stm -> print_int '(' Exp ')' ';'                   (23)
	Stm -> ReturnStm                                   (24)
	ReturnStm -> return Exp ';'                        (25)
	StmBlock -> Stm                                    (26)
	StmBlock -> StmBlock Stm                           (27)
	Exp -> num                                         (28)
	Exp -> string                                      (29)
	Exp -> true                                        (30)
	Exp -> false                                       (31)
	Exp -> Exp '+' Exp                                 (32)
	Exp -> Exp '-' Exp                                 (33)
	Exp -> Exp '*' Exp                                 (34)
	Exp -> Exp '/' Exp                                 (35)
	Exp -> Exp '%' Exp                                 (36)
	Exp -> Exp '<=' Exp                                (37)
	Exp -> Exp '>=' Exp                                (38)
	Exp -> Exp '<' Exp                                 (39)
	Exp -> Exp '>' Exp                                 (40)
	Exp -> Exp '==' Exp                                (41)
	Exp -> Exp '!=' Exp                                (42)
	Exp -> string '(' ExpCallBlock ')'                 (43)
	Exp -> scan_int '(' ')'                            (44)
	Exp -> '(' Exp ')'                                 (45)
	ExpCall -> Exp ','                                 (46)
	ExpCall -> Exp                                     (47)
	ExpCallBlock ->                                    (48)
	ExpCallBlock -> ExpCall                            (49)
	ExpCallBlock -> ExpCallBlock ExpCall               (50)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TOK_INT }
	num            { TOK_NUM $$ }
	string         { TOK_ID $$ }
	if             { TOK_IF }
	then           { TOK_THEN }
	else           { TOK_ELSE }
	return         { TOK_RETURN }
	while          { TOK_WHILE }
	bool           { TOK_BOOLEAN }
	true           { TOK_BOOL $$ }
	false          { TOK_BOOL $$ }
	scan_int       { TOK_SCAN_INT }
	print_int      { TOK_PRINT_INT }
	'+'            { TOK_PLUS }
	'-'            { TOK_MINUS }
	'*'            { TOK_MULT }
	'/'            { TOK_DIV }
	','            { TOK_COMMA }
	';'            { TOK_SEMICOLON }
	'.'            { TOK_DOT }
	'('            { TOK_LPAREN }
	')'            { TOK_RPAREN }
	'{'            { TOK_LBRACE }
	'}'            { TOK_RBRACE }
	'%'            { TOK_MOD }
	'!='           { TOK_NOT_EQUAL }
	'=='           { TOK_EQUALS_EQUALS }
	'='            { TOK_EQUALS }
	'<='           { TOK_LESS_OR_EQUAL }
	'>='           { TOK_GREATER_OR_EQUAL }
	'<'            { TOK_LESS_THAN }
	'>'            { TOK_GREATER_THAN }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Start           rules 1, 2
	Func            rules 3, 4, 5, 6
	FuncAssign      rules 7, 8
	FuncAssignBlock rules 9, 10, 11
	Stm             rules 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24
	ReturnStm       rule  25
	StmBlock        rules 26, 27
	Exp             rules 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45
	ExpCall         rules 46, 47
	ExpCallBlock    rules 48, 49, 50

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            shift, and enter state 3
	bool           shift, and enter state 4

	Start          goto state 5
	Func           goto state 2

State 1


	int            shift, and enter state 3
	bool           shift, and enter state 4

	Func           goto state 2

State 2

	Start -> Func .                                     (rule 1)

	int            reduce using rule 1
	bool           reduce using rule 1
	%eof           reduce using rule 1


State 3

	Func -> int . string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}'    (rule 3)
	Func -> int . string '(' FuncAssignBlock ')' '{' ReturnStm '}'    (rule 5)

	string         shift, and enter state 8


State 4

	Func -> bool . string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}'    (rule 4)
	Func -> bool . string '(' FuncAssignBlock ')' '{' ReturnStm '}'    (rule 6)

	string         shift, and enter state 7


State 5

	%start_parser -> Start .                            (rule 0)
	Start -> Start . Func                               (rule 2)

	int            shift, and enter state 3
	bool           shift, and enter state 4
	%eof           accept

	Func           goto state 6

State 6

	Start -> Start Func .                               (rule 2)

	int            reduce using rule 2
	bool           reduce using rule 2
	%eof           reduce using rule 2


State 7

	Func -> bool string . '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}'    (rule 4)
	Func -> bool string . '(' FuncAssignBlock ')' '{' ReturnStm '}'    (rule 6)

	'('            shift, and enter state 10


State 8

	Func -> int string . '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}'    (rule 3)
	Func -> int string . '(' FuncAssignBlock ')' '{' ReturnStm '}'    (rule 5)

	'('            shift, and enter state 9


State 9

	Func -> int string '(' . FuncAssignBlock ')' '{' StmBlock ReturnStm '}'    (rule 3)
	Func -> int string '(' . FuncAssignBlock ')' '{' ReturnStm '}'    (rule 5)

	int            shift, and enter state 13
	bool           shift, and enter state 14
	','            reduce using rule 9
	')'            reduce using rule 9

	FuncAssign     goto state 11
	FuncAssignBlockgoto state 15

State 10

	Func -> bool string '(' . FuncAssignBlock ')' '{' StmBlock ReturnStm '}'    (rule 4)
	Func -> bool string '(' . FuncAssignBlock ')' '{' ReturnStm '}'    (rule 6)

	int            shift, and enter state 13
	bool           shift, and enter state 14
	','            reduce using rule 9
	')'            reduce using rule 9

	FuncAssign     goto state 11
	FuncAssignBlockgoto state 12

State 11

	FuncAssignBlock -> FuncAssign .                     (rule 10)

	','            reduce using rule 10
	')'            reduce using rule 10


State 12

	Func -> bool string '(' FuncAssignBlock . ')' '{' StmBlock ReturnStm '}'    (rule 4)
	Func -> bool string '(' FuncAssignBlock . ')' '{' ReturnStm '}'    (rule 6)
	FuncAssignBlock -> FuncAssignBlock . ',' FuncAssign    (rule 11)

	','            shift, and enter state 16
	')'            shift, and enter state 20


State 13

	FuncAssign -> int . string                          (rule 7)

	string         shift, and enter state 19


State 14

	FuncAssign -> bool . string                         (rule 8)

	string         shift, and enter state 18


State 15

	Func -> int string '(' FuncAssignBlock . ')' '{' StmBlock ReturnStm '}'    (rule 3)
	Func -> int string '(' FuncAssignBlock . ')' '{' ReturnStm '}'    (rule 5)
	FuncAssignBlock -> FuncAssignBlock . ',' FuncAssign    (rule 11)

	','            shift, and enter state 16
	')'            shift, and enter state 17


State 16

	FuncAssignBlock -> FuncAssignBlock ',' . FuncAssign    (rule 11)

	int            shift, and enter state 13
	bool           shift, and enter state 14

	FuncAssign     goto state 23

State 17

	Func -> int string '(' FuncAssignBlock ')' . '{' StmBlock ReturnStm '}'    (rule 3)
	Func -> int string '(' FuncAssignBlock ')' . '{' ReturnStm '}'    (rule 5)

	'{'            shift, and enter state 22


State 18

	FuncAssign -> bool string .                         (rule 8)

	','            reduce using rule 8
	')'            reduce using rule 8


State 19

	FuncAssign -> int string .                          (rule 7)

	','            reduce using rule 7
	')'            reduce using rule 7


State 20

	Func -> bool string '(' FuncAssignBlock ')' . '{' StmBlock ReturnStm '}'    (rule 4)
	Func -> bool string '(' FuncAssignBlock ')' . '{' ReturnStm '}'    (rule 6)

	'{'            shift, and enter state 21


State 21

	Func -> bool string '(' FuncAssignBlock ')' '{' . StmBlock ReturnStm '}'    (rule 4)
	Func -> bool string '(' FuncAssignBlock ')' '{' . ReturnStm '}'    (rule 6)

	int            shift, and enter state 27
	string         shift, and enter state 28
	if             shift, and enter state 29
	return         shift, and enter state 30
	while          shift, and enter state 31
	bool           shift, and enter state 32
	print_int      shift, and enter state 33
	'{'            shift, and enter state 34

	Stm            goto state 24
	ReturnStm      goto state 35
	StmBlock       goto state 36

State 22

	Func -> int string '(' FuncAssignBlock ')' '{' . StmBlock ReturnStm '}'    (rule 3)
	Func -> int string '(' FuncAssignBlock ')' '{' . ReturnStm '}'    (rule 5)

	int            shift, and enter state 27
	string         shift, and enter state 28
	if             shift, and enter state 29
	return         shift, and enter state 30
	while          shift, and enter state 31
	bool           shift, and enter state 32
	print_int      shift, and enter state 33
	'{'            shift, and enter state 34

	Stm            goto state 24
	ReturnStm      goto state 25
	StmBlock       goto state 26

State 23

	FuncAssignBlock -> FuncAssignBlock ',' FuncAssign .    (rule 11)

	','            reduce using rule 11
	')'            reduce using rule 11


State 24

	StmBlock -> Stm .                                   (rule 26)

	int            reduce using rule 26
	string         reduce using rule 26
	if             reduce using rule 26
	return         reduce using rule 26
	while          reduce using rule 26
	bool           reduce using rule 26
	print_int      reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26


State 25

	Func -> int string '(' FuncAssignBlock ')' '{' ReturnStm . '}'    (rule 5)
	Stm -> ReturnStm .                                  (rule 24)

	int            reduce using rule 24
	string         reduce using rule 24
	if             reduce using rule 24
	return         reduce using rule 24
	while          reduce using rule 24
	bool           reduce using rule 24
	print_int      reduce using rule 24
	'{'            reduce using rule 24
	'}'            shift, and enter state 57


State 26

	Func -> int string '(' FuncAssignBlock ')' '{' StmBlock . ReturnStm '}'    (rule 3)
	StmBlock -> StmBlock . Stm                          (rule 27)

	int            shift, and enter state 27
	string         shift, and enter state 28
	if             shift, and enter state 29
	return         shift, and enter state 30
	while          shift, and enter state 31
	bool           shift, and enter state 32
	print_int      shift, and enter state 33
	'{'            shift, and enter state 34

	Stm            goto state 37
	ReturnStm      goto state 56

State 27

	Stm -> int . string ';'                             (rule 13)
	Stm -> int . string '=' Exp ';'                     (rule 14)

	string         shift, and enter state 55


State 28

	Stm -> string . '=' Exp ';'                         (rule 12)
	Stm -> string . '(' ExpCallBlock ')' ';'            (rule 22)

	'('            shift, and enter state 53
	'='            shift, and enter state 54


State 29

	Stm -> if . Exp Stm Stm                             (rule 17)
	Stm -> if . Exp Stm                                 (rule 18)
	Stm -> if . Exp Stm else Stm                        (rule 19)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 52

State 30

	ReturnStm -> return . Exp ';'                       (rule 25)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 51

State 31

	Stm -> while . Exp Stm                              (rule 20)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 44

State 32

	Stm -> bool . string ';'                            (rule 15)
	Stm -> bool . string '=' Exp ';'                    (rule 16)

	string         shift, and enter state 43


State 33

	Stm -> print_int . '(' Exp ')' ';'                  (rule 23)

	'('            shift, and enter state 42


State 34

	Stm -> '{' . StmBlock '}'                           (rule 21)

	int            shift, and enter state 27
	string         shift, and enter state 28
	if             shift, and enter state 29
	return         shift, and enter state 30
	while          shift, and enter state 31
	bool           shift, and enter state 32
	print_int      shift, and enter state 33
	'{'            shift, and enter state 34

	Stm            goto state 24
	ReturnStm      goto state 40
	StmBlock       goto state 41

State 35

	Func -> bool string '(' FuncAssignBlock ')' '{' ReturnStm . '}'    (rule 6)
	Stm -> ReturnStm .                                  (rule 24)

	int            reduce using rule 24
	string         reduce using rule 24
	if             reduce using rule 24
	return         reduce using rule 24
	while          reduce using rule 24
	bool           reduce using rule 24
	print_int      reduce using rule 24
	'{'            reduce using rule 24
	'}'            shift, and enter state 39


State 36

	Func -> bool string '(' FuncAssignBlock ')' '{' StmBlock . ReturnStm '}'    (rule 4)
	StmBlock -> StmBlock . Stm                          (rule 27)

	int            shift, and enter state 27
	string         shift, and enter state 28
	if             shift, and enter state 29
	return         shift, and enter state 30
	while          shift, and enter state 31
	bool           shift, and enter state 32
	print_int      shift, and enter state 33
	'{'            shift, and enter state 34

	Stm            goto state 37
	ReturnStm      goto state 38

State 37

	StmBlock -> StmBlock Stm .                          (rule 27)

	int            reduce using rule 27
	string         reduce using rule 27
	if             reduce using rule 27
	return         reduce using rule 27
	while          reduce using rule 27
	bool           reduce using rule 27
	print_int      reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27


State 38

	Func -> bool string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm . '}'    (rule 4)
	Stm -> ReturnStm .                                  (rule 24)

	int            reduce using rule 24
	string         reduce using rule 24
	if             reduce using rule 24
	return         reduce using rule 24
	while          reduce using rule 24
	bool           reduce using rule 24
	print_int      reduce using rule 24
	'{'            reduce using rule 24
	'}'            shift, and enter state 86


State 39

	Func -> bool string '(' FuncAssignBlock ')' '{' ReturnStm '}' .    (rule 6)

	int            reduce using rule 6
	bool           reduce using rule 6
	%eof           reduce using rule 6


State 40

	Stm -> ReturnStm .                                  (rule 24)

	int            reduce using rule 24
	string         reduce using rule 24
	if             reduce using rule 24
	else           reduce using rule 24
	return         reduce using rule 24
	while          reduce using rule 24
	bool           reduce using rule 24
	print_int      reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24


State 41

	Stm -> '{' StmBlock . '}'                           (rule 21)
	StmBlock -> StmBlock . Stm                          (rule 27)

	int            shift, and enter state 27
	string         shift, and enter state 28
	if             shift, and enter state 29
	return         shift, and enter state 30
	while          shift, and enter state 31
	bool           shift, and enter state 32
	print_int      shift, and enter state 33
	'{'            shift, and enter state 34
	'}'            shift, and enter state 85

	Stm            goto state 37
	ReturnStm      goto state 40

State 42

	Stm -> print_int '(' . Exp ')' ';'                  (rule 23)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 84

State 43

	Stm -> bool string . ';'                            (rule 15)
	Stm -> bool string . '=' Exp ';'                    (rule 16)

	';'            shift, and enter state 82
	'='            shift, and enter state 83


State 44

	Stm -> while Exp . Stm                              (rule 20)
	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	int            shift, and enter state 27
	string         shift, and enter state 28
	if             shift, and enter state 29
	return         shift, and enter state 30
	while          shift, and enter state 31
	bool           shift, and enter state 32
	print_int      shift, and enter state 33
	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	'{'            shift, and enter state 34
	'%'            shift, and enter state 70
	'!='           shift, and enter state 71
	'=='           shift, and enter state 72
	'<='           shift, and enter state 73
	'>='           shift, and enter state 74
	'<'            shift, and enter state 75
	'>'            shift, and enter state 76

	Stm            goto state 81
	ReturnStm      goto state 40

State 45

	Exp -> num .                                        (rule 28)

	int            reduce using rule 28
	num            reduce using rule 28
	string         reduce using rule 28
	if             reduce using rule 28
	return         reduce using rule 28
	while          reduce using rule 28
	bool           reduce using rule 28
	true           reduce using rule 28
	false          reduce using rule 28
	scan_int       reduce using rule 28
	print_int      reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	','            reduce using rule 28
	';'            reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	'{'            reduce using rule 28
	'%'            reduce using rule 28
	'!='           reduce using rule 28
	'=='           reduce using rule 28
	'<='           reduce using rule 28
	'>='           reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28


State 46

	Exp -> string .                                     (rule 29)
	Exp -> string . '(' ExpCallBlock ')'                (rule 43)

	int            reduce using rule 29
	num            reduce using rule 29
	string         reduce using rule 29
	if             reduce using rule 29
	return         reduce using rule 29
	while          reduce using rule 29
	bool           reduce using rule 29
	true           reduce using rule 29
	false          reduce using rule 29
	scan_int       reduce using rule 29
	print_int      reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	','            reduce using rule 29
	';'            reduce using rule 29
	'('            shift, and enter state 80
			(reduce using rule 29)

	')'            reduce using rule 29
	'{'            reduce using rule 29
	'%'            reduce using rule 29
	'!='           reduce using rule 29
	'=='           reduce using rule 29
	'<='           reduce using rule 29
	'>='           reduce using rule 29
	'<'            reduce using rule 29
	'>'            reduce using rule 29


State 47

	Exp -> true .                                       (rule 30)

	int            reduce using rule 30
	num            reduce using rule 30
	string         reduce using rule 30
	if             reduce using rule 30
	return         reduce using rule 30
	while          reduce using rule 30
	bool           reduce using rule 30
	true           reduce using rule 30
	false          reduce using rule 30
	scan_int       reduce using rule 30
	print_int      reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	','            reduce using rule 30
	';'            reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	'{'            reduce using rule 30
	'%'            reduce using rule 30
	'!='           reduce using rule 30
	'=='           reduce using rule 30
	'<='           reduce using rule 30
	'>='           reduce using rule 30
	'<'            reduce using rule 30
	'>'            reduce using rule 30


State 48

	Exp -> false .                                      (rule 31)

	int            reduce using rule 31
	num            reduce using rule 31
	string         reduce using rule 31
	if             reduce using rule 31
	return         reduce using rule 31
	while          reduce using rule 31
	bool           reduce using rule 31
	true           reduce using rule 31
	false          reduce using rule 31
	scan_int       reduce using rule 31
	print_int      reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	','            reduce using rule 31
	';'            reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	'{'            reduce using rule 31
	'%'            reduce using rule 31
	'!='           reduce using rule 31
	'=='           reduce using rule 31
	'<='           reduce using rule 31
	'>='           reduce using rule 31
	'<'            reduce using rule 31
	'>'            reduce using rule 31


State 49

	Exp -> scan_int . '(' ')'                           (rule 44)

	'('            shift, and enter state 79


State 50

	Exp -> '(' . Exp ')'                                (rule 45)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 78

State 51

	ReturnStm -> return Exp . ';'                       (rule 25)
	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	';'            shift, and enter state 77
	'%'            shift, and enter state 70
	'!='           shift, and enter state 71
	'=='           shift, and enter state 72
	'<='           shift, and enter state 73
	'>='           shift, and enter state 74
	'<'            shift, and enter state 75
	'>'            shift, and enter state 76


State 52

	Stm -> if Exp . Stm Stm                             (rule 17)
	Stm -> if Exp . Stm                                 (rule 18)
	Stm -> if Exp . Stm else Stm                        (rule 19)
	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	int            shift, and enter state 27
	string         shift, and enter state 28
	if             shift, and enter state 29
	return         shift, and enter state 30
	while          shift, and enter state 31
	bool           shift, and enter state 32
	print_int      shift, and enter state 33
	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	'{'            shift, and enter state 34
	'%'            shift, and enter state 70
	'!='           shift, and enter state 71
	'=='           shift, and enter state 72
	'<='           shift, and enter state 73
	'>='           shift, and enter state 74
	'<'            shift, and enter state 75
	'>'            shift, and enter state 76

	Stm            goto state 65
	ReturnStm      goto state 40

State 53

	Stm -> string '(' . ExpCallBlock ')' ';'            (rule 22)

	num            shift, and enter state 45
			(reduce using rule 48)

	string         shift, and enter state 46
			(reduce using rule 48)

	true           shift, and enter state 47
			(reduce using rule 48)

	false          shift, and enter state 48
			(reduce using rule 48)

	scan_int       shift, and enter state 49
			(reduce using rule 48)

	'('            shift, and enter state 50
			(reduce using rule 48)

	')'            reduce using rule 48

	Exp            goto state 62
	ExpCall        goto state 63
	ExpCallBlock   goto state 64

State 54

	Stm -> string '=' . Exp ';'                         (rule 12)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 61

State 55

	Stm -> int string . ';'                             (rule 13)
	Stm -> int string . '=' Exp ';'                     (rule 14)

	';'            shift, and enter state 59
	'='            shift, and enter state 60


State 56

	Func -> int string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm . '}'    (rule 3)
	Stm -> ReturnStm .                                  (rule 24)

	int            reduce using rule 24
	string         reduce using rule 24
	if             reduce using rule 24
	return         reduce using rule 24
	while          reduce using rule 24
	bool           reduce using rule 24
	print_int      reduce using rule 24
	'{'            reduce using rule 24
	'}'            shift, and enter state 58


State 57

	Func -> int string '(' FuncAssignBlock ')' '{' ReturnStm '}' .    (rule 5)

	int            reduce using rule 5
	bool           reduce using rule 5
	%eof           reduce using rule 5


State 58

	Func -> int string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}' .    (rule 3)

	int            reduce using rule 3
	bool           reduce using rule 3
	%eof           reduce using rule 3


State 59

	Stm -> int string ';' .                             (rule 13)

	int            reduce using rule 13
	string         reduce using rule 13
	if             reduce using rule 13
	else           reduce using rule 13
	return         reduce using rule 13
	while          reduce using rule 13
	bool           reduce using rule 13
	print_int      reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13


State 60

	Stm -> int string '=' . Exp ';'                     (rule 14)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 109

State 61

	Stm -> string '=' Exp . ';'                         (rule 12)
	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	';'            shift, and enter state 108
	'%'            shift, and enter state 70
	'!='           shift, and enter state 71
	'=='           shift, and enter state 72
	'<='           shift, and enter state 73
	'>='           shift, and enter state 74
	'<'            shift, and enter state 75
	'>'            shift, and enter state 76


State 62

	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)
	ExpCall -> Exp . ','                                (rule 46)
	ExpCall -> Exp .                                    (rule 47)

	num            reduce using rule 47
	string         reduce using rule 47
	true           reduce using rule 47
	false          reduce using rule 47
	scan_int       reduce using rule 47
	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	','            shift, and enter state 107
	'('            reduce using rule 47
	')'            reduce using rule 47
	'%'            shift, and enter state 70
	'!='           shift, and enter state 71
	'=='           shift, and enter state 72
	'<='           shift, and enter state 73
	'>='           shift, and enter state 74
	'<'            shift, and enter state 75
	'>'            shift, and enter state 76


State 63

	ExpCallBlock -> ExpCall .                           (rule 49)

	num            reduce using rule 49
	string         reduce using rule 49
	true           reduce using rule 49
	false          reduce using rule 49
	scan_int       reduce using rule 49
	'('            reduce using rule 49
	')'            reduce using rule 49


State 64

	Stm -> string '(' ExpCallBlock . ')' ';'            (rule 22)
	ExpCallBlock -> ExpCallBlock . ExpCall              (rule 50)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50
	')'            shift, and enter state 106

	Exp            goto state 62
	ExpCall        goto state 105

State 65

	Stm -> if Exp Stm . Stm                             (rule 17)
	Stm -> if Exp Stm .                                 (rule 18)
	Stm -> if Exp Stm . else Stm                        (rule 19)

	int            shift, and enter state 27
			(reduce using rule 18)

	string         shift, and enter state 28
			(reduce using rule 18)

	if             shift, and enter state 29
			(reduce using rule 18)

	else           shift, and enter state 104
			(reduce using rule 18)

	return         shift, and enter state 30
			(reduce using rule 18)

	while          shift, and enter state 31
			(reduce using rule 18)

	bool           shift, and enter state 32
			(reduce using rule 18)

	print_int      shift, and enter state 33
			(reduce using rule 18)

	'{'            shift, and enter state 34
			(reduce using rule 18)

	'}'            reduce using rule 18

	Stm            goto state 103
	ReturnStm      goto state 40

State 66

	Exp -> Exp '+' . Exp                                (rule 32)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 102

State 67

	Exp -> Exp '-' . Exp                                (rule 33)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 101

State 68

	Exp -> Exp '*' . Exp                                (rule 34)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 100

State 69

	Exp -> Exp '/' . Exp                                (rule 35)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 99

State 70

	Exp -> Exp '%' . Exp                                (rule 36)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 98

State 71

	Exp -> Exp '!=' . Exp                               (rule 42)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 97

State 72

	Exp -> Exp '==' . Exp                               (rule 41)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 96

State 73

	Exp -> Exp '<=' . Exp                               (rule 37)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 95

State 74

	Exp -> Exp '>=' . Exp                               (rule 38)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 94

State 75

	Exp -> Exp '<' . Exp                                (rule 39)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 93

State 76

	Exp -> Exp '>' . Exp                                (rule 40)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 92

State 77

	ReturnStm -> return Exp ';' .                       (rule 25)

	int            reduce using rule 25
	string         reduce using rule 25
	if             reduce using rule 25
	else           reduce using rule 25
	return         reduce using rule 25
	while          reduce using rule 25
	bool           reduce using rule 25
	print_int      reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25


State 78

	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)
	Exp -> '(' Exp . ')'                                (rule 45)

	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	')'            shift, and enter state 91
	'%'            shift, and enter state 70
	'!='           shift, and enter state 71
	'=='           shift, and enter state 72
	'<='           shift, and enter state 73
	'>='           shift, and enter state 74
	'<'            shift, and enter state 75
	'>'            shift, and enter state 76


State 79

	Exp -> scan_int '(' . ')'                           (rule 44)

	')'            shift, and enter state 90


State 80

	Exp -> string '(' . ExpCallBlock ')'                (rule 43)

	num            shift, and enter state 45
			(reduce using rule 48)

	string         shift, and enter state 46
			(reduce using rule 48)

	true           shift, and enter state 47
			(reduce using rule 48)

	false          shift, and enter state 48
			(reduce using rule 48)

	scan_int       shift, and enter state 49
			(reduce using rule 48)

	'('            shift, and enter state 50
			(reduce using rule 48)

	')'            reduce using rule 48

	Exp            goto state 62
	ExpCall        goto state 63
	ExpCallBlock   goto state 89

State 81

	Stm -> while Exp Stm .                              (rule 20)

	int            reduce using rule 20
	string         reduce using rule 20
	if             reduce using rule 20
	else           reduce using rule 20
	return         reduce using rule 20
	while          reduce using rule 20
	bool           reduce using rule 20
	print_int      reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20


State 82

	Stm -> bool string ';' .                            (rule 15)

	int            reduce using rule 15
	string         reduce using rule 15
	if             reduce using rule 15
	else           reduce using rule 15
	return         reduce using rule 15
	while          reduce using rule 15
	bool           reduce using rule 15
	print_int      reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15


State 83

	Stm -> bool string '=' . Exp ';'                    (rule 16)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50

	Exp            goto state 88

State 84

	Stm -> print_int '(' Exp . ')' ';'                  (rule 23)
	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	')'            shift, and enter state 87
	'%'            shift, and enter state 70
	'!='           shift, and enter state 71
	'=='           shift, and enter state 72
	'<='           shift, and enter state 73
	'>='           shift, and enter state 74
	'<'            shift, and enter state 75
	'>'            shift, and enter state 76


State 85

	Stm -> '{' StmBlock '}' .                           (rule 21)

	int            reduce using rule 21
	string         reduce using rule 21
	if             reduce using rule 21
	else           reduce using rule 21
	return         reduce using rule 21
	while          reduce using rule 21
	bool           reduce using rule 21
	print_int      reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21


State 86

	Func -> bool string '(' FuncAssignBlock ')' '{' StmBlock ReturnStm '}' .    (rule 4)

	int            reduce using rule 4
	bool           reduce using rule 4
	%eof           reduce using rule 4


State 87

	Stm -> print_int '(' Exp ')' . ';'                  (rule 23)

	';'            shift, and enter state 115


State 88

	Stm -> bool string '=' Exp . ';'                    (rule 16)
	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	';'            shift, and enter state 114
	'%'            shift, and enter state 70
	'!='           shift, and enter state 71
	'=='           shift, and enter state 72
	'<='           shift, and enter state 73
	'>='           shift, and enter state 74
	'<'            shift, and enter state 75
	'>'            shift, and enter state 76


State 89

	Exp -> string '(' ExpCallBlock . ')'                (rule 43)
	ExpCallBlock -> ExpCallBlock . ExpCall              (rule 50)

	num            shift, and enter state 45
	string         shift, and enter state 46
	true           shift, and enter state 47
	false          shift, and enter state 48
	scan_int       shift, and enter state 49
	'('            shift, and enter state 50
	')'            shift, and enter state 113

	Exp            goto state 62
	ExpCall        goto state 105

State 90

	Exp -> scan_int '(' ')' .                           (rule 44)

	int            reduce using rule 44
	num            reduce using rule 44
	string         reduce using rule 44
	if             reduce using rule 44
	return         reduce using rule 44
	while          reduce using rule 44
	bool           reduce using rule 44
	true           reduce using rule 44
	false          reduce using rule 44
	scan_int       reduce using rule 44
	print_int      reduce using rule 44
	'+'            reduce using rule 44
	'-'            reduce using rule 44
	'*'            reduce using rule 44
	'/'            reduce using rule 44
	','            reduce using rule 44
	';'            reduce using rule 44
	'('            reduce using rule 44
	')'            reduce using rule 44
	'{'            reduce using rule 44
	'%'            reduce using rule 44
	'!='           reduce using rule 44
	'=='           reduce using rule 44
	'<='           reduce using rule 44
	'>='           reduce using rule 44
	'<'            reduce using rule 44
	'>'            reduce using rule 44


State 91

	Exp -> '(' Exp ')' .                                (rule 45)

	int            reduce using rule 45
	num            reduce using rule 45
	string         reduce using rule 45
	if             reduce using rule 45
	return         reduce using rule 45
	while          reduce using rule 45
	bool           reduce using rule 45
	true           reduce using rule 45
	false          reduce using rule 45
	scan_int       reduce using rule 45
	print_int      reduce using rule 45
	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'*'            reduce using rule 45
	'/'            reduce using rule 45
	','            reduce using rule 45
	';'            reduce using rule 45
	'('            reduce using rule 45
	')'            reduce using rule 45
	'{'            reduce using rule 45
	'%'            reduce using rule 45
	'!='           reduce using rule 45
	'=='           reduce using rule 45
	'<='           reduce using rule 45
	'>='           reduce using rule 45
	'<'            reduce using rule 45
	'>'            reduce using rule 45


State 92

	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp '>' Exp .                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	int            reduce using rule 40
	num            reduce using rule 40
	string         reduce using rule 40
	if             reduce using rule 40
	return         reduce using rule 40
	while          reduce using rule 40
	bool           reduce using rule 40
	true           reduce using rule 40
	false          reduce using rule 40
	scan_int       reduce using rule 40
	print_int      reduce using rule 40
	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	','            reduce using rule 40
	';'            reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	'{'            reduce using rule 40
	'%'            shift, and enter state 70
	'!='           fail
	'=='           fail
	'<='           fail
	'>='           fail
	'<'            fail
	'>'            fail


State 93

	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp '<' Exp .                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	int            reduce using rule 39
	num            reduce using rule 39
	string         reduce using rule 39
	if             reduce using rule 39
	return         reduce using rule 39
	while          reduce using rule 39
	bool           reduce using rule 39
	true           reduce using rule 39
	false          reduce using rule 39
	scan_int       reduce using rule 39
	print_int      reduce using rule 39
	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	','            reduce using rule 39
	';'            reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	'{'            reduce using rule 39
	'%'            shift, and enter state 70
	'!='           fail
	'=='           fail
	'<='           fail
	'>='           fail
	'<'            fail
	'>'            fail


State 94

	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp '>=' Exp .                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	int            reduce using rule 38
	num            reduce using rule 38
	string         reduce using rule 38
	if             reduce using rule 38
	return         reduce using rule 38
	while          reduce using rule 38
	bool           reduce using rule 38
	true           reduce using rule 38
	false          reduce using rule 38
	scan_int       reduce using rule 38
	print_int      reduce using rule 38
	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	','            reduce using rule 38
	';'            reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	'{'            reduce using rule 38
	'%'            shift, and enter state 70
	'!='           fail
	'=='           fail
	'<='           fail
	'>='           fail
	'<'            fail
	'>'            fail


State 95

	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp '<=' Exp .                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	int            reduce using rule 37
	num            reduce using rule 37
	string         reduce using rule 37
	if             reduce using rule 37
	return         reduce using rule 37
	while          reduce using rule 37
	bool           reduce using rule 37
	true           reduce using rule 37
	false          reduce using rule 37
	scan_int       reduce using rule 37
	print_int      reduce using rule 37
	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	','            reduce using rule 37
	';'            reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37
	'{'            reduce using rule 37
	'%'            shift, and enter state 70
	'!='           fail
	'=='           fail
	'<='           fail
	'>='           fail
	'<'            fail
	'>'            fail


State 96

	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp '==' Exp .                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	int            reduce using rule 41
	num            reduce using rule 41
	string         reduce using rule 41
	if             reduce using rule 41
	return         reduce using rule 41
	while          reduce using rule 41
	bool           reduce using rule 41
	true           reduce using rule 41
	false          reduce using rule 41
	scan_int       reduce using rule 41
	print_int      reduce using rule 41
	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	','            reduce using rule 41
	';'            reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	'{'            reduce using rule 41
	'%'            shift, and enter state 70
	'!='           fail
	'=='           fail
	'<='           fail
	'>='           fail
	'<'            fail
	'>'            fail


State 97

	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)
	Exp -> Exp '!=' Exp .                               (rule 42)

	int            reduce using rule 42
	num            reduce using rule 42
	string         reduce using rule 42
	if             reduce using rule 42
	return         reduce using rule 42
	while          reduce using rule 42
	bool           reduce using rule 42
	true           reduce using rule 42
	false          reduce using rule 42
	scan_int       reduce using rule 42
	print_int      reduce using rule 42
	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	','            reduce using rule 42
	';'            reduce using rule 42
	'('            reduce using rule 42
	')'            reduce using rule 42
	'{'            reduce using rule 42
	'%'            shift, and enter state 70
	'!='           fail
	'=='           fail
	'<='           fail
	'>='           fail
	'<'            fail
	'>'            fail


State 98

	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp '%' Exp .                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	int            reduce using rule 36
	num            reduce using rule 36
	string         reduce using rule 36
	if             reduce using rule 36
	return         reduce using rule 36
	while          reduce using rule 36
	bool           reduce using rule 36
	true           reduce using rule 36
	false          reduce using rule 36
	scan_int       reduce using rule 36
	print_int      reduce using rule 36
	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            reduce using rule 36
	'/'            reduce using rule 36
	','            reduce using rule 36
	';'            reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	'{'            reduce using rule 36
	'%'            reduce using rule 36
	'!='           reduce using rule 36
	'=='           reduce using rule 36
	'<='           reduce using rule 36
	'>='           reduce using rule 36
	'<'            reduce using rule 36
	'>'            reduce using rule 36


State 99

	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp '/' Exp .                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	int            reduce using rule 35
	num            reduce using rule 35
	string         reduce using rule 35
	if             reduce using rule 35
	return         reduce using rule 35
	while          reduce using rule 35
	bool           reduce using rule 35
	true           reduce using rule 35
	false          reduce using rule 35
	scan_int       reduce using rule 35
	print_int      reduce using rule 35
	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	','            reduce using rule 35
	';'            reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	'{'            reduce using rule 35
	'%'            reduce using rule 35
	'!='           reduce using rule 35
	'=='           reduce using rule 35
	'<='           reduce using rule 35
	'>='           reduce using rule 35
	'<'            reduce using rule 35
	'>'            reduce using rule 35


State 100

	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp '*' Exp .                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	int            reduce using rule 34
	num            reduce using rule 34
	string         reduce using rule 34
	if             reduce using rule 34
	return         reduce using rule 34
	while          reduce using rule 34
	bool           reduce using rule 34
	true           reduce using rule 34
	false          reduce using rule 34
	scan_int       reduce using rule 34
	print_int      reduce using rule 34
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	','            reduce using rule 34
	';'            reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	'{'            reduce using rule 34
	'%'            reduce using rule 34
	'!='           reduce using rule 34
	'=='           reduce using rule 34
	'<='           reduce using rule 34
	'>='           reduce using rule 34
	'<'            reduce using rule 34
	'>'            reduce using rule 34


State 101

	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp '-' Exp .                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	int            reduce using rule 33
	num            reduce using rule 33
	string         reduce using rule 33
	if             reduce using rule 33
	return         reduce using rule 33
	while          reduce using rule 33
	bool           reduce using rule 33
	true           reduce using rule 33
	false          reduce using rule 33
	scan_int       reduce using rule 33
	print_int      reduce using rule 33
	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	','            reduce using rule 33
	';'            reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	'{'            reduce using rule 33
	'%'            shift, and enter state 70
	'!='           reduce using rule 33
	'=='           reduce using rule 33
	'<='           reduce using rule 33
	'>='           reduce using rule 33
	'<'            reduce using rule 33
	'>'            reduce using rule 33


State 102

	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp '+' Exp .                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	int            reduce using rule 32
	num            reduce using rule 32
	string         reduce using rule 32
	if             reduce using rule 32
	return         reduce using rule 32
	while          reduce using rule 32
	bool           reduce using rule 32
	true           reduce using rule 32
	false          reduce using rule 32
	scan_int       reduce using rule 32
	print_int      reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	','            reduce using rule 32
	';'            reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	'{'            reduce using rule 32
	'%'            shift, and enter state 70
	'!='           reduce using rule 32
	'=='           reduce using rule 32
	'<='           reduce using rule 32
	'>='           reduce using rule 32
	'<'            reduce using rule 32
	'>'            reduce using rule 32


State 103

	Stm -> if Exp Stm Stm .                             (rule 17)

	int            reduce using rule 17
	string         reduce using rule 17
	if             reduce using rule 17
	else           reduce using rule 17
	return         reduce using rule 17
	while          reduce using rule 17
	bool           reduce using rule 17
	print_int      reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17


State 104

	Stm -> if Exp Stm else . Stm                        (rule 19)

	int            shift, and enter state 27
	string         shift, and enter state 28
	if             shift, and enter state 29
	return         shift, and enter state 30
	while          shift, and enter state 31
	bool           shift, and enter state 32
	print_int      shift, and enter state 33
	'{'            shift, and enter state 34

	Stm            goto state 112
	ReturnStm      goto state 40

State 105

	ExpCallBlock -> ExpCallBlock ExpCall .              (rule 50)

	num            reduce using rule 50
	string         reduce using rule 50
	true           reduce using rule 50
	false          reduce using rule 50
	scan_int       reduce using rule 50
	'('            reduce using rule 50
	')'            reduce using rule 50


State 106

	Stm -> string '(' ExpCallBlock ')' . ';'            (rule 22)

	';'            shift, and enter state 111


State 107

	ExpCall -> Exp ',' .                                (rule 46)

	num            reduce using rule 46
	string         reduce using rule 46
	true           reduce using rule 46
	false          reduce using rule 46
	scan_int       reduce using rule 46
	'('            reduce using rule 46
	')'            reduce using rule 46


State 108

	Stm -> string '=' Exp ';' .                         (rule 12)

	int            reduce using rule 12
	string         reduce using rule 12
	if             reduce using rule 12
	else           reduce using rule 12
	return         reduce using rule 12
	while          reduce using rule 12
	bool           reduce using rule 12
	print_int      reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12


State 109

	Stm -> int string '=' Exp . ';'                     (rule 14)
	Exp -> Exp . '+' Exp                                (rule 32)
	Exp -> Exp . '-' Exp                                (rule 33)
	Exp -> Exp . '*' Exp                                (rule 34)
	Exp -> Exp . '/' Exp                                (rule 35)
	Exp -> Exp . '%' Exp                                (rule 36)
	Exp -> Exp . '<=' Exp                               (rule 37)
	Exp -> Exp . '>=' Exp                               (rule 38)
	Exp -> Exp . '<' Exp                                (rule 39)
	Exp -> Exp . '>' Exp                                (rule 40)
	Exp -> Exp . '==' Exp                               (rule 41)
	Exp -> Exp . '!=' Exp                               (rule 42)

	'+'            shift, and enter state 66
	'-'            shift, and enter state 67
	'*'            shift, and enter state 68
	'/'            shift, and enter state 69
	';'            shift, and enter state 110
	'%'            shift, and enter state 70
	'!='           shift, and enter state 71
	'=='           shift, and enter state 72
	'<='           shift, and enter state 73
	'>='           shift, and enter state 74
	'<'            shift, and enter state 75
	'>'            shift, and enter state 76


State 110

	Stm -> int string '=' Exp ';' .                     (rule 14)

	int            reduce using rule 14
	string         reduce using rule 14
	if             reduce using rule 14
	else           reduce using rule 14
	return         reduce using rule 14
	while          reduce using rule 14
	bool           reduce using rule 14
	print_int      reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14


State 111

	Stm -> string '(' ExpCallBlock ')' ';' .            (rule 22)

	int            reduce using rule 22
	string         reduce using rule 22
	if             reduce using rule 22
	else           reduce using rule 22
	return         reduce using rule 22
	while          reduce using rule 22
	bool           reduce using rule 22
	print_int      reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22


State 112

	Stm -> if Exp Stm else Stm .                        (rule 19)

	int            reduce using rule 19
	string         reduce using rule 19
	if             reduce using rule 19
	else           reduce using rule 19
	return         reduce using rule 19
	while          reduce using rule 19
	bool           reduce using rule 19
	print_int      reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19


State 113

	Exp -> string '(' ExpCallBlock ')' .                (rule 43)

	int            reduce using rule 43
	num            reduce using rule 43
	string         reduce using rule 43
	if             reduce using rule 43
	return         reduce using rule 43
	while          reduce using rule 43
	bool           reduce using rule 43
	true           reduce using rule 43
	false          reduce using rule 43
	scan_int       reduce using rule 43
	print_int      reduce using rule 43
	'+'            reduce using rule 43
	'-'            reduce using rule 43
	'*'            reduce using rule 43
	'/'            reduce using rule 43
	','            reduce using rule 43
	';'            reduce using rule 43
	'('            reduce using rule 43
	')'            reduce using rule 43
	'{'            reduce using rule 43
	'%'            reduce using rule 43
	'!='           reduce using rule 43
	'=='           reduce using rule 43
	'<='           reduce using rule 43
	'>='           reduce using rule 43
	'<'            reduce using rule 43
	'>'            reduce using rule 43


State 114

	Stm -> bool string '=' Exp ';' .                    (rule 16)

	int            reduce using rule 16
	string         reduce using rule 16
	if             reduce using rule 16
	else           reduce using rule 16
	return         reduce using rule 16
	while          reduce using rule 16
	bool           reduce using rule 16
	print_int      reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16


State 115

	Stm -> print_int '(' Exp ')' ';' .                  (rule 23)

	int            reduce using rule 23
	string         reduce using rule 23
	if             reduce using rule 23
	else           reduce using rule 23
	return         reduce using rule 23
	while          reduce using rule 23
	bool           reduce using rule 23
	print_int      reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 51
Number of terminals: 32
Number of non-terminals: 11
Number of states: 116
